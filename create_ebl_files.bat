@echo off

:: THIS FILE IS GENERATED BY APPBUILDER, DO NOT MODIFY
:: CONFIGURE VIA ENV VARS

:: use PATH_GCCARM env var to override default path for gcc-arm
if "%PATH_GCCARM%"=="" (
  set OBJCOPY=\bin\arm-none-eabi-objcopy.exe
) else (
  set OBJCOPY=%PATH_GCCARM%\bin\arm-none-eabi-objcopy.exe
)

:: use PATH_SCMD env var to override default path for Simplicity Commander
if "%PATH_SCMD%"=="" (
  set COMMANDER=C:\SiliconLabs\SimplicityStudio\v4\developer\adapter_packs\commander\commander.exe
) else (
  set COMMANDER=%PATH_SCMD%\commander.exe
)

:: use PATH_OUT env var to override the full path for the .out file

:: default filename and dirs to match *.out file
set FILENAME_OUT=ble-module.out
set DIR_STUDIO=IAR ARM - Default
set DIR_EWP=Debug\Exe

:: output path of the OTA and UART DFU ebl files (relative to project root)
set PATH_EBL=output_ebl

:: names of the OTA and UART DFU output files
set OTA_STACK_NAME=stack
set OTA_APP_NAME=app
set UARTDFU_FULL_NAME=full

:: change the working dir to the dir of the batch file, which should be in the project root
cd %~dp0

if "%PATH_OUT%"=="" (
  if exist "%DIR_STUDIO%\%FILENAME_OUT%" (
    set PATH_OUT=%DIR_STUDIO%\%FILENAME_OUT%
  ) else if exist "%DIR_EWP%\%FILENAME_OUT%" (
    set PATH_OUT=%DIR_EWP%\%FILENAME_OUT%
  ) else (
    echo Error: %FILENAME_OUT% file not found
    echo Was the project compiled and linked successfully?
    pause
    goto:eof
  )
)

if not exist "%OBJCOPY%" (
  echo Error: gcc-arm objcopy not found at '%OBJCOPY%'
  echo Use PATH_GCCARM env var to override default path for gcc-arm.
  pause
  goto:eof
)

if not exist "%COMMANDER%" (
  echo Error: Simplicity Commander not found at '%COMMANDER%'
  echo Use PATH_SCMD env var to override default path for Simplicity Commander.
  pause
  goto:eof
)

echo **********************************************************************
echo Converting .out to .ebl files
echo **********************************************************************
echo.
echo .out file used:
echo %~dp0%PATH_OUT%
echo.
echo output folder:
echo %~dp0%PATH_EBL%

if not exist %PATH_EBL% (
  mkdir %PATH_EBL%
)

:: create the EBL files
echo.
echo **********************************************************************
echo Creating %OTA_STACK_NAME%.ebl for OTA
echo **********************************************************************
echo.
%OBJCOPY% -O srec -j .text_stack* "%PATH_OUT%" "%PATH_EBL%\%OTA_STACK_NAME%.srec"
%COMMANDER% convert "%PATH_EBL%\%OTA_STACK_NAME%.srec" -o "%PATH_EBL%\%OTA_STACK_NAME%.ebl" -d EFR32F256
echo.
echo **********************************************************************
echo Creating %OTA_APP_NAME%.ebl for OTA
echo **********************************************************************
echo.
%OBJCOPY% -O srec -j .text_app* "%PATH_OUT%" "%PATH_EBL%\%OTA_APP_NAME%.srec"
%COMMANDER% convert "%PATH_EBL%\%OTA_APP_NAME%.srec" -o "%PATH_EBL%\%OTA_APP_NAME%.ebl" -d EFR32F256

:: create the full EBL file for UART DFU
echo.
echo **********************************************************************
echo Creating %UARTDFU_FULL_NAME%.ebl for UART DFU
echo **********************************************************************
echo.
%OBJCOPY% -O srec -R .text_bootloader* "%PATH_OUT%" "%PATH_EBL%\%UARTDFU_FULL_NAME%.srec"
%COMMANDER% convert "%PATH_EBL%\%UARTDFU_FULL_NAME%.srec" -o "%PATH_EBL%\%UARTDFU_FULL_NAME%.ebl" -d EFR32F256

:: clean up output dir
del "%PATH_EBL%\*.srec"

pause
