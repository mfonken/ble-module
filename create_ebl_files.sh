#!/bin/sh

# THIS FILE IS GENERATED BY APPBUILDER, DO NOT MODIFY
# CONFIGURE VIA ENV VARS

# use PATH_GCCARM env var to override default path for gcc-arm
if [[ -z ${PATH_GCCARM} ]]; then
  OBJCOPY="/bin/arm-none-eabi-objcopy"
  if [[ `uname` == CYGWIN* ]]; then OBJCOPY="`cygpath ${OBJCOPY}`"; fi
else
  OBJCOPY="${PATH_GCCARM}/bin/arm-none-eabi-objcopy"
fi

# use PATH_SCMD env var to override default path for Simplicity Commander
if [[ -z ${PATH_SCMD} ]]; then
  COMMANDER="C:\SiliconLabs\SimplicityStudio\v4\developer\adapter_packs\commander\commander.exe"
  if [[ `uname` == CYGWIN* ]]; then COMMANDER="`cygpath ${COMMANDER}`"; fi
else
  COMMANDER="${PATH_SCMD}/commander"
fi

# use PATH_OUT env var to override the full path for the .out file

# default filename and dirs to match *.out file
FILENAME_OUT="ble-module.out"
DIR_STUDIO="IAR ARM - Default"
DIR_EWP="Debug/Exe"

# output path of the OTA and UART DFU ebl files (relative to project root)
PATH_EBL="output_ebl"

# names of the OTA and UART DFU output files
OTA_STACK_NAME="stack"
OTA_APP_NAME="app"
UARTDFU_FULL_NAME="full"

# change the working dir to the dir of the batch file, which should be in the project root
cd "${0%/*}"

if [[ -z ${PATH_OUT} ]]; then
  if [[ -f "${DIR_STUDIO}/${FILENAME_OUT}" ]]; then
    PATH_OUT="${DIR_STUDIO}/${FILENAME_OUT}"
  elif [[ -f "${DIR_EWP}/${FILENAME_OUT}" ]]; then
    PATH_OUT="${DIR_EWP}/${FILENAME_OUT}"
  else
    echo "Error: ${FILENAME_OUT} file not found"
    echo "Was the project compiled and linked successfully?"
    read -rsp $'Press enter to continue...\n'
    exit
  fi
fi

if [[ ! -f "${OBJCOPY}" ]]; then
  echo "Error: gcc-arm objcopy not found at '${OBJCOPY}'"
  echo "Use PATH_GCCARM env var to override default path for gcc-arm."
  read -rsp $'Press enter to continue...\n'
  exit
fi

if [[ ! -f "${COMMANDER}" ]]; then
  echo "Error: Simplicity Commander not found at '${COMMANDER}'"
  echo "Use PATH_SCMD env var to override default path for Simplicity Commander."
  read -rsp $'Press enter to continue...\n'
  exit
fi

echo "**********************************************************************"
echo "Converting .out to .ebl files"
echo "**********************************************************************"
echo
echo ".out file used:"
echo "${0%/*}${PATH_OUT}"
echo
echo "output folder:"
echo "${0%/*}${PATH_EBL}"

mkdir -p ${PATH_EBL}

# create the EBL files
echo
echo "**********************************************************************"
echo "Creating ${OTA_STACK_NAME}.ebl for OTA"
echo "**********************************************************************"
echo
"${OBJCOPY}" -O srec -j .text_stack* "${PATH_OUT}" "${PATH_EBL}/${OTA_STACK_NAME}.srec"
"${COMMANDER}" convert "${PATH_EBL}/${OTA_STACK_NAME}.srec" -o "${PATH_EBL}/${OTA_STACK_NAME}.ebl" -d EFR32F256
echo 
echo "**********************************************************************"
echo "Creating ${OTA_APP_NAME}.ebl for OTA"
echo "**********************************************************************"
echo
"${OBJCOPY}" -O srec -j .text_app* "${PATH_OUT}" "${PATH_EBL}/${OTA_APP_NAME}.srec"
"${COMMANDER}" convert "${PATH_EBL}/${OTA_APP_NAME}.srec" -o "${PATH_EBL}/${OTA_APP_NAME}.ebl" -d EFR32F256

# create the full EBL file for UART DFU
echo
echo "**********************************************************************"
echo "Creating ${UARTDFU_FULL_NAME}.ebl for UART DFU"
echo "**********************************************************************"
echo
"${OBJCOPY}" -O srec -R .text_bootloader* "${PATH_OUT}" "${PATH_EBL}/${UARTDFU_FULL_NAME}.srec"
"${COMMANDER}" convert "${PATH_EBL}/${UARTDFU_FULL_NAME}.srec" -o "${PATH_EBL}/${UARTDFU_FULL_NAME}.ebl" -d EFR32F256

# clean up output dir
rm "${PATH_EBL}"/*.srec

read -rsp $'Press enter to continue...\n'
